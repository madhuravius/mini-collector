// Auto-generated code. DO NOT EDIT.
package datadog

import (
	"fmt"
	"github.com/aptible/mini-collector/internal/aggregator/batch"
)

func formatBatch(batch batch.Batch) datadogPayload {
	allSeries := make([]datadogSeries, 0, len(batch.Entries))

	var (
		series datadogSeries
		host string
		ok bool
	)

	for _, entry := range batch.Entries {
		tags := make([]string, 0, len(entry.Tags))

		for k, v := range entry.Tags {
			tags = append(tags, fmt.Sprintf("%s:%s", k, v))
		}

		ts := entry.Time.Unix()

		var val int64

		{{range $idx, $row := .Rows}}
		{{ if eq $row.RawFieldName "running"}}
		val = 0
		if entry.Running {
			val = 1
		}
		{{ else }}
		val = int64(entry.{{ $row.CamelCasedFieldName }})
		{{ end }}

		if val >= 0 {
			series = datadogSeries{
				Metric: "enclave.{{ $row.RawFieldName }}",
				Points: []datadogPoint{
					datadogPoint{ts, val},
				},
				Type: "gauge",
				Tags: tags,
			}

			host, ok = entry.Tags["host_name"]
			if ok {
				series.Host = host
			}

			allSeries = append(allSeries, series)
		}
		{{ end }}

	}

	return datadogPayload{Series: allSeries}
}
